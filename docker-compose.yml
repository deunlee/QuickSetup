version: "3.7"
# https://docs.docker.com/compose/compose-file/compose-file-v3/
# https://github.com/compose-spec/compose-spec/blob/master/spec.md

# Reload Command:
    # dce php kill -USR2 1
    # dce nginx nginx -s reload
    # dcr certbot certbot renew

services:

    mariadb: # https://hub.docker.com/_/mariadb
        build: mariadb/docker
        restart: always
        # ports:
            # - 53306:3306
        volumes:
            - ./mariadb/config/init:/docker-entrypoint-initdb.d:ro
            - ./mariadb/config/mariadb.cnf:/etc/mysql/conf.d/mariadb.cnf:ro
            - ./mariadb/data:/var/lib/mysql
        env_file:
            - ./mariadb/config/config.env # 데이터베이스명 및 사용자 설정
            - ./timezone.env
        # help:
            # init 디렉터리에 있는 모든 .sql 파일은 컨테이너 최초 시작시 자동으로 import 된다.
            # 컨테이너 최초 시작 여부는 ./mariab/data 하위의 mysql 디렉터리 존재 여부로 판단한다.
            # https://github.com/MariaDB/mariadb-docker/blob/master/10.6/docker-entrypoint.sh


    php: # https://hub.docker.com/_/php
        # https://github.com/docker-library/docs/tree/master/php
        build: php/docker
        restart: always
        depends_on:
            - mariadb
        volumes:
            - ./php/config/php.ini:/usr/local/etc/php/conf.d/zzz-override.ini:ro
            - ./php/config/php-fpm.conf:/usr/local/etc/php-fpm.d/zzz-override.conf:ro
            - ./php/log:/var/log/php
            - ./www/html:/var/www/html
        env_file:
            - ./timezone.env


    nginx: # https://hub.docker.com/_/nginx
        build: nginx/docker
        restart: always
        depends_on:
            - php
            # - guacamole
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./nginx/config/helper:/etc/nginx/helper:ro
            - ./nginx/config/private:/etc/nginx/private
            - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/config/sites-enabled:/etc/nginx/sites-enabled:ro
            - ./nginx/config/sites-available:/etc/nginx/sites-available:ro
            - ./nginx/log:/var/log/nginx
            - ./www/html:/var/www/html
            # - ./certbot/data:/etc/letsencrypt:ro
            # - ./certbot/www:/var/www/certbot:ro
        env_file:
            - ./timezone.env
        extra_hosts:
            - "host.docker.internal:host-gateway"
        # command: "/bin/sh -c 'while :; do sleep 72h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"


    certbot: # https://hub.docker.com/r/certbot/certbot
        build: certbot/docker
        volumes:
            - ./certbot/data:/etc/letsencrypt
            - ./certbot/log:/var/log/letsencrypt
            - ./certbot/www:/var/www/certbot
        env_file:
            - ./timezone.env
        # 초기 인증서 설정은 ./script/init_certbot.sh 스크립트 이용 (도메인 및 이메일 수정)
        # DNS TXT 레코드 인증을 통한 와일드카드 인증서 발급:
        # dcr certbot certbot certonly --manual --agree-tos --preferred-challenges dns -d "example.com" -d "*.example.com" --email "admin@example.com"

    #================================================================================

    nodejs: # https://hub.docker.com/_/node
        build: nodejs/docker
        restart: on-failure # always, unless-stopped
        volumes:
            - ./nodejs/app:/app
        environment:
            NODE_ENV: production
            # NODE_ENV: development
        env_file:
            - ./timezone.env
        working_dir: /app
        entrypoint: "npm start" # "npm run docker"
        user: 1000:1000


    mongo: # https://hub.docker.com/_/mongo
        build: mongo/docker
        restart: always
        ports:
            - 27017:27017
        volumes:
            - ./mongo/data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: some-secure-password


    mongo-express: # https://hub.docker.com/_/mongo-express
        image: mongo-express
        restart: always
        depends_on:
            - mongo
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: some-secure-password
            ME_CONFIG_MONGODB_URL: mongodb://root:some-secure-password@mongo:27017/
            ME_CONFIG_BASICAUTH_USERNAME: 'user'
            ME_CONFIG_BASICAUTH_PASSWORD: 'web-password'
            # ME_CONFIG_SITE_SSL_ENABLED: true
            # ME_CONFIG_SITE_SSL_CRT_PATH: ''
            # ME_CONFIG_SITE_SSL_KEY_PATH: ''

    #================================================================================

    uptime: # https://hub.docker.com/r/louislam/uptime-kuma
        image: louislam/uptime-kuma:1
        restart: always
        ports:
            - 3001:3001
        volumes:
            - ./uptime/data:/app/data


    guacamole: # https://hub.docker.com/r/guacamole/guacamole
        # https://github.com/boschkundendienst/guacamole-docker-compose
        image: guacamole/guacamole
        restart: always
        depends_on:
            - guacd
            - postgres
        ports:
            - 8081:8080  # Guacamole is on "/guacamole", not "/".
        environment:
            GUACD_HOSTNAME: guacd
            POSTGRES_HOSTNAME: postgres
        env_file:
            - ./guacamole/config/config.env
        # chmod +x ./script/init_guacamole.sh && ./script/init_guacamole.sh


    guacd: # https://hub.docker.com/r/guacamole/guacd
        image: guacamole/guacd
        restart: always
        volumes:
            - ./guacamole/data/drive:/drive
            - ./guacamole/data/record:/record


    postgres: # https://hub.docker.com/_/postgres
        image: postgres:16.0-alpine3.18
        restart: always
        volumes:
            - ./guacamole/config/init:/docker-entrypoint-initdb.d:ro
            - ./guacamole/data/postgres:/var/lib/postgresql/data
        env_file:
            - ./guacamole/config/config.env # 데이터베이스명 및 사용자 설정


    # kasmweb: # https://hub.docker.com/r/kasmweb/rockylinux-9-desktop
    #     build: kasmweb/docker
    #     ports:
    #         - 6901:6901
    #     environment:
    #         - VNC_PW=12341234
    #         # Web VNC User: kasm_user
    #         # Linux User  : kasm-user
    #     shm_size: 1G # (default: 512m)

    #================================================================================

    thingsboard: # https://hub.docker.com/r/thingsboard/tb-postgres
        image: thingsboard/tb-postgres
        restart: always
        ports:
            - 9090:9090 # HTTP
            - 1883:1883 # MQTT
            - 7070:7070 # Edge RPC
            # - 5683-5688:5683-5688/udp # CoAP and LwM2M
        volumes:
            - ./thingsboard/data:/data
            - ./thingsboard/log:/var/log/thingsboard
            # sudo chown -R 799:799 ./thingsboard/data
            # sudo chown -R 799:799 ./thingsboard/log
        environment:
            TB_QUEUE_TYPE: in-memory
        # Default Credentials:
            # System Admin  : sysadmin@thingsboard.org / sysadmin
            # Tenant Admin  : tenant@thingsboard.org   / tenant
            # Customer User : customer@thingsboard.org / customer


    mosquitto: # https://hub.docker.com/_/eclipse-mosquitto
        build: mosquitto/docker
        restart: always
        ports:
            - 1883:1883 # for MQTT
            # - 9001:9001 # for WebSocket
        volumes:
            - ./mosquitto/config:/mosquitto/config
            - ./mosquitto/data:/mosquitto/data
            - ./mosquitto/log:/mosquitto/log
        env_file:
            - ./timezone.env


    # espidf: # https://hub.docker.com/r/espressif/idf
    #     image: espressif/idf:v4.4.5
    #     volumes:
    #         - ./espidf/data:/project
    #     working_dir: /project
    #     # /opt/esp/idf/components/espcoredump/espcoredump.py
    #     # docker compose run espidf espcoredump.py info_corefile -c coredump.raw -t raw -rom-elf firmware.elf

    #================================================================================


    # wireshark:
    #     image: lscr.io/linuxserver/wireshark:latest
    #     restart: unless-stopped
    #     ports:
    #         - 3000:3000 # optional
    #         - 3001:3001 # optional
    #     volumes:
    #         - /wireshark/config:/config
    #     environment:
    #         - PUID=1000
    #         - PGID=1000
    #         - CUSTOM_USER=user
    #         - PASSWORD=1q2w3e4r
    #     env_file:
    #         - ./timezone.env
    #     cap_add:
    #         - NET_ADMIN
    #     security_opt:
    #         - seccomp:unconfined # optional
    #     network_mode: host









# container_name: 컨테이너 고유 이름 (지정하지 않을 경우 자동 생성)
    # 고유값이므로 docker-compose.yml 파일을 복사하여 같은 호스트에서 실행할 경우 수정해야 한다.
    # 컨테이너 내부에서 다른 컨테이너의 컨테이너/서비스 이름을 모두 사용할 수 있으므로,
    # 서비스 이름만 지정하고 컨테이너 이름은 지정하지 않는 것이 좋다.

# extra_hosts:
    # 지정된 도메인 매핑 정보를 컨테이너의 /etc/hosts에 등록한다.
    # 컨테이너에서 호스트 아이피를 알면 직접 접속이 가능하지만,
    # host-gateway를 이용하면 아이피를 모르는 경우에도 도메인으로 접속할 수 있다.
    # 호스트에서 돌아가는 서비스에 리버스 프록시를 사용할 경우 사용할 수 있다. (e.g. code-server)

# ports vs. expose:
    # ports  : 컨테이너 포트를 호스트에 매핑하여 노출시킴 (호스트:컨테이너)
    #          이 값을 설정하지 않아도 다른 컨테이너에서는 항상 접속할 수 있다.
    # expose : 다른 컨테이너에게 포트를 노출시킴 (호스트에는 노출되지 않음)

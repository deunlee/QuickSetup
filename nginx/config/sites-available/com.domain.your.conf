server {
    listen      80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # listen      80;
    # listen [::]:80;
    # server_name your.domain.com;

    # Enable when using authentication for the Certbot certificate renewal.
    # location /.well-known/acme-challenge/ {
    #     root /var/www/certbot;
    # }

    # Enable if you want to add a simple page that shows the visitor's IP.
    # location = /ip {
    #     default_type text/html;
    #     return 200 "<!DOCTYPE html><html><head><meta name=\"robots\" content=\"noindex, nofollow, noarchive, nosnippet, noodp, noimageindex\" /><title>Your IP Address</title></head><body><h1>Your IP is<br>$remote_addr</h1></body></html>";
    # }

    # Enable if you want to add page to view the current status of the NGINX.
    # (e.g. curl -k https://your.domain.com/nginx_status)
    location /nginx_status {
        access_log off;
        stub_status on;
        allow 10.0.0.0/8; # Only available on private networks.
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }

    # Redirect to HTTPS.
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen      443 default ssl;
    listen [::]:443 default ssl;
    server_name _;

    # listen      443 ssl;
    # listen [::]:443 ssl;
    # server_name your.domain.com;
    # ssl_certificate     /etc/letsencrypt/live/your.domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your.domain.com/privkey.pem;


    location = /robots.txt {
        access_log /var/log/nginx/robots.log main;
        default_type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }
    location = /ip {
        access_log off;
        default_type text/html;
        return 200 "<!DOCTYPE html><html><head><meta name=\"robots\" content=\"noindex, nofollow, noarchive, nosnippet, noodp, noimageindex\" /><title>Your IP Address</title></head><body><h1>Your IP is $remote_addr</h1></body></html>";
    }


    # < Basic HTTP Authentication >
    auth_basic "Login";
    auth_basic_user_file /etc/nginx/private/.htpasswd; # Docker Host: `./nginx/config/private/.htpasswd`
    # Rocky  : sudo yum install httpd-tools
    #          /usr/bin/htpasswd -5 -c .htpasswd <user-name>
    # Alpine : apk add apache2-utils
    #          dce nginx htpasswd -B -n <user-name>
    error_page 401 /401.html;
    location = /401.html {
        # When using auth_basic, 401 occurs once when connecting for the first time.
        # If credential is incorrect, 401 continues to occur. If it is correct, it does not occur.
        internal; # Only works internally and does NOT process external requests.
        access_log /var/log/nginx/auth_first_or_failed.log main;
        default_type text/html;
        return 401 "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Unauthorized</title></head><body><h2>This incident will be reported. ($remote_addr)</h2></body></html>";
    }


    # < Cloudflare >
    # Enable if you want to get the visitor's original IP when using the Cloudflare.
    # include ./helper/cloudflare.conf;


    # < Code-Server >
    # Enable if you want to use a reverse proxy with service running on the host. (e.g. code-server)
    # If you don't know the host IP, extra_hosts configuration required in docker.
    # Because inside the container 127.0.0.1 doesn't mean the host.
    location /code/ {
        rewrite ^/code/(.*)$ /$1 break;
        proxy_pass       http://host.docker.internal:8080;
        proxy_set_header Host            $host;
        proxy_set_header Upgrade         $http_upgrade;
        proxy_set_header Connection      $http_connection; # "keep-alive", "Upgrade";
        proxy_set_header Accept-Encoding $http_accept_encoding;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        access_log /var/log/nginx/code_server.log main if=$log_filter_code_server;
    }


    # < Apache Guacamole >
    location /guaca/ {
        # https://guacamole.apache.org/doc/gug/reverse-proxy.html#proxying-with-nginx
        # Unlike other WASs, the guacamole requires `/guacamole` in the URL to operate.
        # NGINX inserts `/guacamole` into the URL to make it behave like a regular WAS.
        rewrite ^/guaca/(.*)$ /guacamole/$1 break;
        proxy_pass         http://guacamole:8080;
        proxy_buffering    off;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade         $http_upgrade;
        proxy_set_header   Connection      $http_connection;
        proxy_set_header   Accept-Encoding $http_accept_encoding;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        # access_log off;
        access_log /var/log/nginx/guacamole.log main if=$log_filter_guacamole;
    }


    # < Synology DSM >
    location /nas/ {
        rewrite ^/nas/(.*)$ /$1 break;
        proxy_pass         https://nas.lan:5001;
        proxy_redirect     off;
        proxy_buffering    on;
        proxy_http_version 1.1;
        proxy_read_timeout 60s;
        proxy_set_header   Host              $http_host;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        $http_connection;
        proxy_set_header   Accept-Encoding   $http_accept_encoding;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        client_max_body_size      0; # 0 = No upload size limit
        proxy_max_temp_file_size  0; # 0 = No download size limit
        # access_log off;
        access_log /var/log/nginx/synology_dsm.log main if=$log_filter_synology_dsm;
    }


    # < Static File Serving >
    root  /var/www/html;
    index index.html;
    location / {
        # The Basic HTTP Auth doesn't work if `return` is used.
        try_files $uri $uri/ =404;
        # default_type text/html;
        # return 404 "404";
    }


    # < PHP-FPM with Static File Serving >
    # root  /var/www/html;
    # index index.html index.htm index.php;
    # location / {
    #     # try_files $uri $uri/ =404;
    #     try_files $uri $uri/ /index.php?$args;
    # }
    # location ~ \.php$ {
    #     try_files     $uri =404;
    #     fastcgi_split_path_info ^(.+\.php)(/.+)$;
    #     fastcgi_pass  php:9000; # The IP of the php container is mapped to "php" by docker.
    #     fastcgi_index index.php;
    #     include       fastcgi_params;
    #     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #     fastcgi_param PATH_INFO $fastcgi_path_info;
    # }
}


# < Log Filters >
map $request_uri $log_filter_code_server {
    ~^/code/stable-[0-9a-f]+/static/ 0;
    ~^/code/stable-[0-9a-f]+/vscode-remote-resource\?path=%2Fhome%2F[0-9a-z]+%2F\.local%2Fshare%2Fcode-server%2Fextensions%2F 0;
    ~^/code/stable-[0-9a-f]+/vscode-remote-resource\?path=%2Fusr%2Flib%2Fcode-server%2Flib%2Fvscode%2Fextensions%2F 0;
    ~^/code/_static/(src|out)/browser/ 0;
    default 1;
}

map $request_uri $log_filter_guacamole {
    ~^/guaca/(images|fonts|translations)/ 0;
    ~^/guaca/app. 0;
    ~^/guaca/.*\.(js|css|map)$ 0;
    ~^/guaca/api/session/data/postgresql(-shared)?/(activeConnections|connectionGroups/ROOT/tree)$ 0;
    ~^/guaca/api/session/data/postgresql/schema/protocols$ 0;
    ~^/guaca/api/(patches|languages)$ 0;
    default 1;
}

map $request $log_filter_synology_dsm {
    ~^GET./nas/webman/(modules|3rdparty|resources)/ 0;
    ~^GET./nas/(scripts|synoSDSjslib)/ 0;
    ~^POST./nas/webapi/entry.cgi.HTTP/1\.1$ 0;
    default 1;
}


# $http_host   : HTTP Request의 Host 헤더 값
# $host        : Host 헤더에서 포트를 삭제하고 소문자로 변환한 값 (헤더가 없다면, server_name 사용)
# $server_name : 해당 서버 블럭의 이름
# $hostname    : NGINX가 구동되는 컴퓨터 이름


# proxy_max_temp_file_size: 프록시 서버의 응답에 대한 임시 파일 버퍼의 크기를 지정 (default = 1024m)
    # 프록시 서버의 응답에 버퍼링을 사용하고 응답이 메모리 버퍼 크기(4/8k)를 초과하는 경우,
    # 해당 응답을 NGINX가 임시 파일 버퍼에 저장한다.
    # 기본값을 사용할 경우 클라이언트는 1GB 이상 파일을 다운로드 받을 수 없다.
    # 0으로 설정할 경우 비활성화되며, 프록시 서버로부터 응답을 클라이언트에게 버퍼링 없이 전송한다.
    # 이때, 클라이언트 환경이 느리다면 커넥션이 오래 유지되어야 하므로 리소스가 낭비될 수 있다.
    # 버퍼링을 사용하는 경우 NGINX가 응답을 임시 파일로 저장하고, 업스트림 프록시 서버와의 커넥션을 더 빨리 받을 수 있다.

